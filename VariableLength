import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;

public class VariableLength {

    private String data;
    ArrayList<Character> characters = new ArrayList<>();
    ArrayList<Integer> occurrence = new ArrayList<>();
    Map<Character, String> mp = new HashMap<>();


    public VariableLength() {
    }

    public String getData() {
        return data;
    }

    public void readFromFile(String strPath) throws IOException {
        Path path = Paths.get(strPath);
        data = Files.readString(path, StandardCharsets.US_ASCII);
    }

    public void getOccuringChar() {

        // Create an array of size 256 i.e. ASCII_SIZE
        int count[] = new int[256];

        int len = data.length();

        // Initialize count array index
        for (int i = 0; i < len; i++)
            count[data.charAt(i)]++;

        // Create an array of given String size
        char ch[] = new char[data.length()];
        for (int i = 0; i < len; i++) {
            ch[i] = data.charAt(i);
            int find = 0;
            for (int j = 0; j <= i; j++) {

                // If any matches found
                if (data.charAt(i) == ch[j])
                    find++;
            }

            if (find == 1) {
                characters.add(data.charAt(i));
                occurrence.add(count[data.charAt(i)]);
            }

        }
    }


    public void someSorting() {
        int temp;
        char cTemp;
        for (int i = 0; i < (characters.size() - 1); i++) {
            for (int j = 0; j < characters.size() - i - 1; j++) {
                if (occurrence.get(j) < occurrence.get(j + 1)) {
                    temp = occurrence.get(j);
                    occurrence.set(j, occurrence.get(j + 1));
                    occurrence.set(j + 1, temp);

                    cTemp = characters.get(j);
                    characters.set(j, characters.get(j + 1));
                    characters.set(j + 1, cTemp);
                }
            }
        }
    }

    public void createEncoding() {
        Queue<String> queue = new LinkedList<>();
        if (characters.size() == 0) return;
        queue.add("0");
        queue.add("1");
        String parent;
        while (queue.size() < characters.size()) {
            parent = queue.remove();
            queue.add(parent + "0");
            queue.add(parent + "1");
        }
        for (int i = 0; i < characters.size(); i++) {
            mp.put(characters.get(i), queue.element());
            queue.remove();
        }
    }
    public void createCompressedFile() throws IOException {
        try {
            File myObj = new File("compressed_file.txt");
            if (myObj.createNewFile()) {
                System.out.println("File created: " + myObj.getName());
            } else {
                System.out.println("File already exists.");
            }
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }


        try {
            FileWriter myWriter = new FileWriter("compressed_file.txt");


            for(int i=0;i<data.length();i++){
                myWriter.write(mp.get(data.charAt(i)));
            }

            myWriter.close();
            System.out.println("Successfully wrote to the file.");
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
    }
    public void run() throws IOException {
        readFromFile("write your path");
        getOccuringChar();
        someSorting();
        createEncoding();
        createCompressedFile();
    }


    public static void main(String[] args) throws IOException {
        VariableLength variableLength = new VariableLength();
        variableLength.run();
    }

}

